/**
 * Script de prueba para simular flujos de conversaci√≥n con interrupciones
 * Simula: hablar -> avatar responde -> interrumpir -> hablar -> avatar responde
 */

// Funci√≥n para simular un evento personalizado
function triggerEvent(eventName, detail = {}) {
  const event = new CustomEvent(eventName, { detail });
  window.dispatchEvent(event);
  console.log(`üé¨ Test Event: ${eventName}`, detail);
}

// Funci√≥n para simular transcripci√≥n de voz
function simulateVoiceTranscription(text, isFinal = true) {
  console.log(`üé§ Simulando transcripci√≥n: "${text}"`);
  triggerEvent('test-voice-transcription', { text, isFinal });
}

// Funci√≥n para simular env√≠o de texto al avatar
function simulateAvatarResponse(text) {
  console.log(`ü§ñ Simulando respuesta del avatar: "${text}"`);
  triggerEvent('test-send-stream-text', { text });
}

// Funci√≥n para simular interrupci√≥n manual
function simulateManualInterrupt() {
  console.log(`üõë Simulando interrupci√≥n manual`);
  triggerEvent('test-manual-interrupt');
}

// Funci√≥n para simular interrupci√≥n por voz (barge-in)
function simulateVoiceInterrupt() {
  console.log(`üî• Simulando interrupci√≥n por voz (barge-in)`);
  triggerEvent('test-voice-interrupt');
}

// Test Case 1: Conversaci√≥n normal sin interrupciones
async function testNormalConversation() {
  console.log('\n=== TEST 1: Conversaci√≥n Normal ===');
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  simulateVoiceTranscription("Hola, ¬øc√≥mo est√°s?");
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  console.log('‚úÖ Test 1: Conversaci√≥n normal completada');
}

// Test Case 2: Conversaci√≥n con interrupci√≥n manual
async function testManualInterruptConversation() {
  console.log('\n=== TEST 2: Interrupci√≥n Manual ===');
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  simulateVoiceTranscription("Cu√©ntame una historia larga");
  
  await new Promise(resolve => setTimeout(resolve, 3000));
  simulateManualInterrupt();
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  simulateVoiceTranscription("Mejor hablemos de otra cosa");
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  console.log('‚úÖ Test 2: Interrupci√≥n manual completada');
}

// Test Case 3: Conversaci√≥n con barge-in por voz
async function testVoiceInterruptConversation() {
  console.log('\n=== TEST 3: Barge-in por Voz ===');
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  simulateVoiceTranscription("Expl√≠came algo complejo");
  
  await new Promise(resolve => setTimeout(resolve, 3000));
  simulateVoiceInterrupt();
  
  await new Promise(resolve => setTimeout(resolve, 500));
  simulateVoiceTranscription("Espera, tengo una pregunta");
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  console.log('‚úÖ Test 3: Barge-in por voz completada');
}

// Test Case 4: M√∫ltiples interrupciones consecutivas
async function testMultipleInterrupts() {
  console.log('\n=== TEST 4: M√∫ltiples Interrupciones ===');
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  simulateVoiceTranscription("Empecemos una conversaci√≥n");
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  simulateVoiceInterrupt();
  
  await new Promise(resolve => setTimeout(resolve, 500));
  simulateVoiceTranscription("Primera interrupci√≥n");
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  simulateManualInterrupt();
  
  await new Promise(resolve => setTimeout(resolve, 500));
  simulateVoiceTranscription("Segunda interrupci√≥n");
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  simulateVoiceTranscription("Conversaci√≥n final");
  
  await new Promise(resolve => setTimeout(resolve, 2000));
  console.log('‚úÖ Test 4: M√∫ltiples interrupciones completadas');
}

// Funci√≥n principal para ejecutar todos los tests
async function runAllTests() {
  console.log('üöÄ Iniciando Tests de Flujo de Conversaci√≥n');
  console.log('Monitorea los logs de la consola para ver el comportamiento del sistema');
  
  await testNormalConversation();
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  await testManualInterruptConversation();
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  await testVoiceInterruptConversation();
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  await testMultipleInterrupts();
  
  console.log('\nüéâ Todos los tests completados');
  console.log('Revisa los logs para identificar problemas en el flujo');
}

// Funci√≥n para ejecutar un test espec√≠fico
function runSingleTest(testNumber) {
  switch(testNumber) {
    case 1:
      testNormalConversation();
      break;
    case 2:
      testManualInterruptConversation();
      break;
    case 3:
      testVoiceInterruptConversation();
      break;
    case 4:
      testMultipleInterrupts();
      break;
    default:
      console.log('Test n√∫mero inv√°lido. Usa 1-4');
  }
}

// Exponer funciones globalmente para uso manual
window.conversationTest = {
  runAllTests,
  runSingleTest,
  simulateVoiceTranscription,
  simulateAvatarResponse,
  simulateManualInterrupt,
  simulateVoiceInterrupt
};

console.log('üîß Script de prueba cargado.');
console.log('Uso:');
console.log('- conversationTest.runAllTests() - Ejecuta todos los tests');
console.log('- conversationTest.runSingleTest(1-4) - Ejecuta un test espec√≠fico');
console.log('- conversationTest.simulateVoiceTranscription("texto") - Simula voz');
console.log('- conversationTest.simulateManualInterrupt() - Simula interrupci√≥n manual');