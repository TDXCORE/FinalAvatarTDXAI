Flujo completo con corte + reinicio
(‚Äúloop‚Äù resaltado en color)

Paso	Actor / Componente	Acci√≥n	Observaci√≥n
0	UI / Usuario	Hace clic o dice ‚Äúhola‚Äù ‚Üí comienza turno	streamingState = 'empty'
1	STT	Se env√≠an chunks a Whisper ‚Üí texto parcial	
2	LLM + TTS	Sale respuesta; se abre nuevo streamId en D-ID	streamingState = 'streaming' ‚Üí isBotSpeaking = true
3	Usuario	Interrumpe hablando encima	
4	VAD	Detecta voz ¬†‚ûú onInterrupt()	
5	handleInterrupt	abort() + DELETE /streams/{id}	corta audio local + remoto
6	WebRTC	Track ended ‚ûú streamingState = 'empty'	Loop vuelve al paso 0
7	STT	Sigue activo ‚Üí ya est√° recibiendo la voz que deton√≥ la interrupci√≥n	nueva transcripci√≥n inicia otra iteraci√≥n

üî∏ D√≥nde se reinicia el ciclo

La clave es streamingState = 'empty' que se setea dentro de handleInterrupt (paso 6).

Esa asignaci√≥n provoca que tu componente de conversaci√≥n (o el hook que gobierna el turno) reconozca que el bot ya no est√° hablando y vuelva a modo ‚Äúlisten‚Äù.

Como Whisper nunca dej√≥ de recibir audio (solo se abort√≥ el fetch del TTS/LLM), la frase del usuario que origin√≥ la interrupci√≥n ya est√° encola¬≠da; el backend reinicia desde el paso 1 autom√°ticamente.

Secuencia ASCII (con loop)
sql
Copiar
Usuario           VAD            AvatarComp        STT/LLM/TTS       D-ID
  |  habla           |                |                 |              |
  |------------------>| frame          |                 |              |
  |  (interrupci√≥n)   | RMS>thr        |                 |              |
  |                   | isBot=TRUE     |                 |              |
  |                   |----INT------->>| abort()         |              |
  |                   |                |----X----------->|              |
  |                   |                | DELETE stream-->|              |
  |                   |                |                 |<-204 / close |
  |                   |                | track ended --->|(WebRTC)      |
  |                   |                | setState(empty) |              |
  |<------------------|  **STT ya sigue escuchando**     |              |
  |  termina frase    |                |                 |              |
  |------------------>| texto parcial  |                 |              |
  |                   |                |--- nueva ronda STT‚ÜíLLM‚ÜíTTS‚ÜíD-ID
Puntos de c√≥digo donde ocurre el reinicio
handleInterrupt()

ts
Copiar
setStreamingState('empty');        // ‚Üê gatilla el loop
Hook / efecto que dispara STT+LLM

ts
Copiar
useEffect(() => {
  if (streamingState === 'empty' && partialText) {
    // Ya hay texto nuevo ‚Üí llama again fetchLLM()
  }
}, [streamingState, partialText]);
Whisper no se pausa ‚Äì El micr√≥fono y la VAD permanecen activos, por eso la conversaci√≥n reanuda sin pedir permisos de nuevo.

Con este ajuste queda expl√≠cito d√≥nde y c√≥mo el pipeline vuelve a empezar despu√©s de cada interrupci√≥n.