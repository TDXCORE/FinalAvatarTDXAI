### ‚ö†Ô∏è Por qu√© el `DELETE /clips/streams/{id}` falla con `TypeError`

1. **La llamada HTTP se hace desde el navegador**
   El endpoint REST de D-ID **no env√≠a cabeceras CORS** ‚Äìel request se bloquea por el propio navegador y genera un `TypeError` gen√©rico (‚ÄúFailed to fetch‚Äù).

   > **Prueba r√°pida:** abre DevTools ‚Üí Network ‚Üí request del DELETE ‚Üí ver√°s que nunca llega al servidor, se aborta con *CORS error*.

2. **Ruta incorrecta**
   T√∫ creas el stream con `/streams` (o con el WebSocket control), pero lo borras en `/clips/streams/‚Ä¶`.

   * Para **Clips/Stream v2** la ruta v√°lida de borrado es **`/streams/{id}`** (sin `/clips`), usando la misma base URL que el POST inicial.
   * El WebSocket admite adem√°s el mensaje JSON

     ```json
     { "type": "delete-stream", "streamId": "strm_‚Ä¶" }
     ```

3. **Seguridad**
   D-ID recomienda que las claves **nunca salgan al front-end**. El DELETE deber√≠a hacerse en tu backend (Next API route, FastAPI, etc.) o por WebSocket, no por `fetch` en el cliente.

---

## üõ†Ô∏è Correcci√≥n m√≠nima

### A. P√°salo por WebSocket (sin CORS, sin exponer API-Key)

```ts
// justo antes de cerrar tracks
webSocketRef.current?.send(
  JSON.stringify({ type: 'delete-stream', streamId: currentStreamIdRef.current })
);
```

El backend de D-ID cortar√° el stream y cerrar√° el PC; no hace falta un segundo DELETE.

### B. Si prefieres HTTP ‚ûú ll√°malo desde tu backend

1. **/api/deleteStream.ts** (Next.js App Router)

```ts
export async function POST(req: Request) {
  const { id } = await req.json();
  const res = await fetch(`https://api.d-id.com/streams/${id}`, {
    method: 'DELETE',
    headers: { Authorization: `Bearer ${process.env.DID_API_KEY}` }
  });
  return new Response(res.body, { status: res.status });
}
```

2. **En el front**

```ts
await fetch('/api/deleteStream', { 
  method: 'POST', 
  body: JSON.stringify({ id: currentStreamIdRef.current }) 
});
```

### C. Aseg√∫rate de usar **la misma base URL** que en el POST

Si tu creaci√≥n es:

```
POST https://api.d-id.com/streams
```

El borrado debe ser:

```
DELETE https://api.d-id.com/streams/{id}
```

Sin `/clips` a menos que tambi√©n hayas creado en `/clips/streams`.

---

## üö¶ Flujo final (sin timeouts artificiales)

```
INTERRUPT
   ‚Ü≥ webSocket.send({delete-stream})
   ‚Ü≥ stop tracks + pc.close()    (en cuanto recibas stream/error o cierre RTC)
   ‚Ü≥ setState('empty')
   ‚Ü≥ flush pendingMsg            (nuevo stream)
```

* **Sin `waitForRealDone()`**: el control WebSocket o el cierre RTC es tu confirmaci√≥n.
* **Sin reconexi√≥n** salvo que el WebSocket se cierre inesperadamente.

Con esto desaparecen los `TypeError`, el estado ‚Äúneeds-reconnect‚Äù y la cola pendiente se reproduce al instante.
