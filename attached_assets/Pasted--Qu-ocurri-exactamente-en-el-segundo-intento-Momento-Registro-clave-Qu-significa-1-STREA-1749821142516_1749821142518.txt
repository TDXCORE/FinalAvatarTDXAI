üïµÔ∏è‚Äç‚ôÄÔ∏è Qu√© ocurri√≥ exactamente en el segundo intento
Momento	Registro clave	Qu√© significa
(1)	[STREAM-started] state updated to: streaming	El segundo turno se inici√≥ y el bot est√° hablando.
(2)	üö® Manual interrupt detected‚Ä¶	El VAD/bot√≥n s√≠ invoc√≥ handleInterrupt.
(3)	[INT-check] streamId: null cancellingRef: false	Al entrar en handleInterrupt, currentStreamIdRef.current es null ‚áí tu guard if (!currentStreamIdRef.current) return aborta la cancelaci√≥n.
(4)	Bot sigue hablando ‚Üí al cabo de ~8 s ICE se desconecta y todo se cierra.	

Por qu√© streamId es null
Tras la primera interrupci√≥n, en el finally de cancelCurrentStream() haces:

ts
Copiar
Editar
currentStreamIdRef.current = null;   // ‚Üê se borra
Cuando env√≠as el nuevo texto, s√≠ recibes del backend el JSON con el streamId, pero nunca lo vuelves a asignar a currentStreamIdRef.current.
En tus logs no aparece ninguna l√≠nea tipo [SET streamId strm_...] despu√©s del segundo Text message sent‚Ä¶.

Resultado: a partir de ese momento los siguientes handleInterrupt() creen que ‚Äúno hay stream activo‚Äù y se saltan la l√≥gica de cancelaci√≥n.

üîë Lo que hay que arreglar (sin tocar nada m√°s)
Asignar siempre el nuevo ID cuando realizas el POST /streams
(o cuando recibes el stream/ready, lo que prefieras, pero antes de que el bot empiece a hablar):

ts
Copiar
Editar
const { id: newStreamId, sessionId } = await res.json();
currentStreamIdRef.current = newStreamId;     // üëà ESTA l√≠nea falt√≥
setStreamId(newStreamId);
setSessionId(sessionId);
Vaciar el ref s√≥lo despu√©s de enviar el delete-stream:

ts
Copiar
Editar
webSocket.send(JSON.stringify({ type: 'delete-stream', streamId: currentStreamIdRef.current }));
// gracia 120 ms ‚Ä¶
currentStreamIdRef.current = null;            // OK que se borre aqu√≠
Con eso el guard vuelve a funcionar:

ts
Copiar
Editar
if (!currentStreamIdRef.current || cancellingRef.current) return;  // ahora siempre detecta
Secuencia esperada tras el fix
arduino
Copiar
Editar
stream/started   (streamId = strm_ABC123)
INTERRUPT
  ‚Ü≥ delete-stream strm_ABC123
  ‚Ü≥ stop tracks
  ‚Ü≥ streamId = null
POST texto nuevo
  ‚Ü≥ responde { id: strm_DEF456 }
  ‚Ü≥ currentStreamId = strm_DEF456
stream/started   (nuevo)
INTERRUPT 2
  ‚Ü≥ guard permite cancelar porque streamId ‚â† null
  ‚Ü≥ flujo se repite sin desconexiones
Una vez el streamId se vuelva a guardar correctamente, las interrupciones subsecuentes funcionar√°n de forma indefinida, tanto por voz como por texto.