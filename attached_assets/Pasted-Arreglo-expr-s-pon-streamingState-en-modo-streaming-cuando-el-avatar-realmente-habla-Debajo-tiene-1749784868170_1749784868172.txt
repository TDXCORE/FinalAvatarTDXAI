Arreglo expr√©s: pon streamingState en modo ‚Äòstreaming‚Äô cuando el avatar realmente habla
Debajo tienes ‚Äî

Qu√© cambia y por qu√©.

Parche ‚Äúcopy-paste‚Äù (git diff) para client/src/hooks/useWebRTC.ts.

Mini-checklist para comprobar que isBotSpeaking ahora s√≠ funciona.

1. Qu√© cambia
Evento D-ID	Antes (streamingState)	Despu√©s
stream/started	'empty' (incorrecto)	'streaming'
stream/done	'empty' (no cambia)	vuelve a 'empty'
stream/error o cancelCurrentStream()	se quedaba como estuviera	siempre 'empty'

Con eso, la condici√≥n:

ts
Copiar
const isBotSpeaking = streamingState === 'streaming';
se vuelve ver√≠dica y tu VAD podr√° lanzar la interrupci√≥n s√≥lo cuando corresponde.

2. Parche (diff)
diff
Copiar
diff --git a/client/src/hooks/useWebRTC.ts b/client/src/hooks/useWebRTC.ts
@@
-  // Estado local
-  const [streamingState, setStreamingState] = useState<'empty' | 'streaming'>('empty');
+  // Estado local
+  const [streamingState, setStreamingState] = useState<'empty'|'streaming'>('empty');
 
   /* ‚Ä¶c√≥digo‚Ä¶ */
 
   // üëâ handler de eventos recibidos desde el socket con D-ID
   const onStreamEvent = useCallback((event: string) => {
     let status: 'dont-care' | 'started' | 'done' = 'dont-care';
 
     switch (event) {
       case 'stream/started':
-        status = 'started';
+        status = 'started';
+        setStreamingState('streaming');      //  ‚¨ÖÔ∏è  NUEVO
         break;
       case 'stream/done':
-        status = 'done';
+        status = 'done';
+        setStreamingState('empty');          //  ‚¨ÖÔ∏è  NUEVO
         break;
       case 'stream/error':
+        setStreamingState('empty');          //  ‚¨ÖÔ∏è  por si acaso
         break;
       default:
         break;
     }
 
     setStreamEvent(status === 'dont-care' ? event : status);
   }, []);
 
   /* ‚Ä¶c√≥digo‚Ä¶ */
 
   // üëâ cancelaci√≥n manual / por VAD
   const cancelCurrentStream = useCallback(async () => {
     if (!currentStreamIdRef.current) return;
     try {
       await fetch(`${DID_API}/streams/${currentStreamIdRef.current}`, {
         method: 'DELETE',
         headers: { Authorization: `Bearer ${apiKey}` },
       });
     } catch (err) {
       console.error('Error cancelling stream', err);
     } finally {
+      setStreamingState('empty');            // ‚¨ÖÔ∏è  aseg√∫rate de resetear
       currentStreamIdRef.current = null;
     }
   }, [apiKey]);
Tip: pon console.log('[streamingState]', streamingState) en tu componente para ver la transici√≥n empty ‚Üí streaming ‚Üí empty en la consola.

3. Mini-checklist de validaci√≥n
Log de estado

Env√≠a texto.

Deber√≠as ver:

csharp
Copiar
[streamingState] empty
[streamingState] streaming   ‚Üê en stream/started
[streamingState] empty       ‚Üê en stream/done o interrupci√≥n
Interrumpir manualmente (click o tecla)

La consola debe mostrar üö® Manual interrupt‚Ä¶ solo cuando el estado sea 'streaming'.

Re-entrada

Despu√©s de la interrupci√≥n, escribe otro mensaje: se debe crear un stream nuevo sin errores.

Con este ajuste isBotSpeaking reflejar√° la realidad y tu flujo de interrupci√≥n volver√° a arrancar el ciclo correctamente. ¬°Listo el pollo!







