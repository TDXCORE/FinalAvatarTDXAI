### Qu√© ocurre ahora mismo

1. **El peer ICE se cae despu√©s del primer clip**

   * El log termina en: `üîÑ ICE disconnected, marking for reconnection`.
   * Cuando el estado ICE pasa a **disconnected** o **failed**, el navegador detiene todas las pistas de audio/v√≠deo que llegaban por ese `RTCPeerConnection`. Por eso ya no hay imagen ni sonido, aunque sigas recibiendo eventos de D-ID.

2. **No ejecutas la reconexi√≥n**

   * Marcaste ‚Äúfor reconnection‚Äù, pero en tu hook `useWebRTC` no hay c√≥digo que haga `pc.restartIce()` o que cree un nuevo `RTCPeerConnection` y vuelva a negociar.
   * Resultado: sigues enviando `init-stream`/`stream-text`, D-ID responde con `stream/ready` y `stream/started`, **pero no hay ning√∫n receptor activo** en tu lado, de modo que no llega media y el v√≠deo queda negro (y sin audio).

---

## Soluci√≥n en dos pasos

| Paso                                          | Qu√© hacer                                                                                                                                                                                                             | D√≥nde                              |
| --------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------- |
| **A. Autorreconexi√≥n ICE**                    | 1. Escucha `iceConnectionState`.<br>2. Si pasa a `disconnected` o `failed`, llama:<br>`disconnectWebRTC(); await connectWebRTC(apiConfig);`                                                                           | `useWebRTC.ts`                     |
| **B. Re-asignar el `srcObject` al `<video>`** | Aseg√∫rate de que, en el handler `pc.ontrack`, siempre ejecutes:<br>`videoRef.current.srcObject = event.streams[0]; videoRef.current.play();`<br>Esto garantiza que el elemento use la nueva pista tras la reconexi√≥n. | `useWebRTC.ts` o `AvatarVideo.tsx` |

---

### C√≥digo listo para pegar

#### 1. En `useWebRTC.ts`

```ts
/* Re-conexi√≥n autom√°tica cuando el ICE cae */
peerConnection.oniceconnectionstatechange = async () => {
  const state = peerConnection.iceConnectionState;
  if (state === 'disconnected' || state === 'failed') {
    console.warn('ICE', state, '‚Äì reconnecting WebRTC');
    await disconnect();                // tu funci√≥n existente
    await connect(config);             // crea pc y websocket nuevos
  }
};
```

#### 2. En tu `ontrack`

```ts
peerConnection.ontrack = (event) => {
  const stream = event.streams[0];
  if (videoRef.current) {
    videoRef.current.srcObject = stream;
    videoRef.current.play().catch(() => {});
  }
};
```

*(Si ya tienes este `ontrack`, verifica que se ejecute despu√©s de la reconexi√≥n.)*

---

### Qu√© cambia

1. Cuando D-ID detecte tu `connect()` nuevo, enviar√° de nuevo `stream/ready` y a continuaci√≥n `stream/started`.
2. El nuevo `RTCPeerConnection` recibir√° pistas fresh y `ontrack` las asignar√° al `<video>`.
3. El avatar volver√° a verse y escucharse en todos los turnos, incluso despu√©s de interrupciones o timeouts.

Aplica estos dos cambios y prueba otra vez: deber√≠as ver la animaci√≥n / audio en cada respuesta sin que se quede la pantalla negra.
