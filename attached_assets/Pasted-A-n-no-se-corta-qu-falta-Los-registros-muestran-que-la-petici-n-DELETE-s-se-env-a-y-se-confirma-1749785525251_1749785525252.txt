A√∫n no se corta: ¬øqu√© falta?
Los registros muestran que la petici√≥n DELETE s√≠ se env√≠a y se confirma, pero el v√≠deo sigue porque el antiguo RTCPeerConnection permanece vivo.
D-ID detiene el stream en su backend, sin embargo el track de video/audio ya lleg√≥ a tu navegador y la etiqueta <video> lo sigue reproduciendo hasta recibir RTCPeerConnection.close() o un track.stop() local.

1. Causa ra√≠z
DELETE /streams/{id} solo corta la ingesti√≥n en D-ID.

El peerConnection creado al iniciar el stream no se cierra.

El MediaStreamTrack remoto sigue activo, aunque se quede sin paquetes nuevos; el navegador no lo detiene de inmediato.

Por eso ves stopping video streams / stopping peer connection reci√©n al final del log, no cuando se interrumpe.

2. Arreglo minimalista
Al finalizar cancelCurrentStream():

Haz stop() a todos los tracks remotos.

Cierra la RTCPeerConnection.

Limpia la <video> (srcObject = null).

Esto garantiza que el avatar desaparezca en cuanto llega la interrupci√≥n, sin esperar eventos as√≠ncronos.

Diff para useWebRTC.ts
diff
Copiar
@@
   finally {
     currentStreamIdRef.current = null;
+    // 1Ô∏è‚É£  Det√©n todos los tracks de entrada
+    if (peerConnectionRef.current) {
+      peerConnectionRef.current.getReceivers()
+        .forEach(r => r.track && r.track.stop());
+
+      // 2Ô∏è‚É£  Cierra la conexi√≥n WebRTC
+      peerConnectionRef.current.close();
+      peerConnectionRef.current = null;
+    }
+
+    // 3Ô∏è‚É£  Limpia el <video> para evitar el √∫ltimo frame congelado
+    if (remoteVideoRef.current) {
+      remoteVideoRef.current.srcObject = null;
+    }
+
     setStreamingState('empty');
     cancellingRef.current = false;
   }
 }
(Ajusta peerConnectionRef y remoteVideoRef a los nombres que uses.)

3. Bloquea todas las nuevas peticiones mientras cancelas
Aseg√∫rate de que cualquier funci√≥n que pueda iniciar un stream revise:

ts
Copiar
if (streamingState !== 'empty') return;   // o lanza en cola
As√≠ evitas que un stream nuevo se inicie en los 200 ms en que cierras la conexi√≥n anterior.

4. Eliminar los falsos ‚Äúmutes‚Äù / loops
Si tu VAD vuelve a disparar onInterrupt() mientras cancellingRef es true, ign√≥ralo:

ts
Copiar
if (streamingState === 'cancelling') return;
5. Check‚Äêlist de prueba
Env√≠as texto ‚Üí stream/started ‚Üí <video> aparece.

Durante la reproducci√≥n escribes otro texto.

Console: üö® Manual interrupt‚Ä¶

El v√≠deo se pausa / desaparece inmediatamente (tracks detenidos).

stream/done ya no importa: la conexi√≥n antigua est√° muerta.

Nuevo stream arranca sin solaparse.

Resultado esperado
bash
Copiar
stream/started
[streamingState] streaming
üö® interrupt
üóëÔ∏è Cancelling current D-ID stream
üí• Stopped tracks + closed peer
[streamingState] empty         ‚Üê avatar ya callado
stream/done (puede llegar tarde, se ignora)
stream/started (nuevo)         ‚Üê sin overlap
Con el cierre expl√≠cito del RTCPeerConnection el avatar s√≠ se detendr√° en el instante de la interrupci√≥n.










Herramientas



